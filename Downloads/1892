https://sli.ics.uci.edu/PmWiki/Functions



SLI | PmWiki / Functions 


 












(?)





Classes
Group
Research
Publications
Code






login




PmWiki /
Functions





< Variables | Documentation Index | Page file format >

admins (advanced) 

This page describes some of the internal workings of PmWiki by explaining how some of the functions in pmwiki.php work. For a more brief list/overview on functions useful to for instance cookbook writers, see Cookbook:Functions. 

To use this functions you have to make sure that all relevant internal variables have been initialized correctly. See Custom Markup and Custom Actions for more information on how these functions are typically called via Markup() or $HandleActions[].

 pmcrypt($password, $salt = null)
The pmcrypt() function is intended to be a safe replacement for the PHP 5.6+ crypt() function without providing a $salt, which would raise a notice. If a salt is provided, crypt() is called to check an existing password. If a salt is not provided,  password_hash() will be called to create a cryptographically strong password hash.

 PCCF($php_code, $callback_template='default', $callback_arguments = '$m')
The PCCF() function (PmWiki Create Callback Function) can be used to create callback functions used with preg_replace_callback. It is required for PHP 5.5, but will also work with earlier PHP versions.

The first argument is the PHP code to be evaluated. 

The second argument (optional) is the callback template, a key from the global $CallbackFnTemplates array. There are two templates that can be used by recipe authors: 
'default' will pass $php_code as a function code
'return' will wrap $php_code like "return $php_code;" (since PmWiki 2.2.62)
The third argument (optional) is the argument of the callback function. Note that PmWiki uses the '$m' argument to pass the matches of a regular expression search, but your function can use other argument(s).

PCCF() will create an anonymous (lambda) callback function containing the supplied code, and will cache it. On subsequent calls with the same $php_code, PCCF() will return the cached function name.

See http://php.net/create_function.

 PPRA($array_search_replace, $string)
The PPRA() function (PmWiki preg_replace array) can be used to perform a regular expression replacement with or without evaluation, for PHP 5.5 compatibility. 

Since PmWiki 2.2.56, PmWiki uses this function to process the following arrays: $MakePageNamePatterns, $FmtP, $QualifyPatterns, $ROEPatterns, $ROSPatterns, $SaveAttrPatterns, $MakeUploadNamePatterns. Any custom settings should continue to work for PHP 5.4 and earlier, but wikis running on PHP 5.5 may need to make a few changes.

The first argument contains the 'search'=>'replace' pairs, the second is the  "haystack" string to be manipulated.

The 'replace' parts of the array can be strings or function names. If the 'replace' part is a callable function name, it will be called with the array of matches as a first argument via preg_replace_callback(). If not a callable function, a simple preg_replace() will be performed.

Previously, PmWiki used such constructs:
  $fmt = preg_replace(array_keys($FmtP), array_values($FmtP), $fmt);
It is now possible to use simply this:
  $fmt = PPRA($FmtP, $fmt);
Note that since PHP 5.5, the search patterns cannot have an /e evaluation flag. When creating the $array_search_replace array, before PHP 5.5 we could use something like (eg. for $MakePageNamePatterns):
  '/(?<=^| )([a-z])/e' => "strtoupper('$1')",
Since PHP 5.5, we should use this (will also work in PHP 5.4 and earlier):
  '/(?<=^| )([a-z])/' => PCCF("return strtoupper(\$m[1]);"),
Note that the /e flag should be now omitted, instead of '$0', '$1', '$2', we should use $m[0], $m[1], $m[2], etc. in the replacement code, and there is no need to call PSS() in the replacement code, as backslashes are not automatically added.

 PPRE($search_pattern, $replacement_code, $string)
The PPRE() function (PmWiki preg_replace evaluate) can be used to perform a regular expression replacement with evaluation.

Since PHP 5.5, the preg_replace() function has deprecated the /e evaluation flag, and displays warnings when the flag is used. The PPRE() function automatically creates a callback function with the replacement code and calls it.

Before PHP 5.5, it was possible to use such calls:
  $fmt = preg_replace('/\\$([A-Z]\\w*Fmt)\\b/e','$GLOBALS["$1"]',$fmt);
Since PHP 5.5, it is possible to replace the previous snippet with the following (also works before PHP 5.5):
  $fmt = PPRE('/\\$([A-Z]\\w*Fmt)\\b/','$GLOBALS[$m[1]]',$fmt);
Note that the /e flag should be now omitted, instead of '$0', '$1', '$2', we should use $m[0], $m[1], $m[2], etc. in the replacement code, and there is no need to call PSS() in the replacement code, as backslashes are not automatically added.

 PHSC($string_or_array, $flags=ENT_COMPAT, $encoding=null, $double_encode=true)
The PHSC() function (PmWiki HTML special characters) is a replacement for the PHP function htmlspecialchars. 

The htmlspecialchars() function was modified since PHP 5.4 in two ways: it now requires a valid string for the supplied encoding, and it changes the default encoding to UTF-8. This can cause sections of the page to become blank/empty on many sites using the ISO-8859-1 encoding without having set the third argument ($encoding) when calling htmlspecialchars().

The PHSC() function calls htmlspecialchars() with an 8-bit encoding as third argument, whatever the encoding of the wiki (unless you supply an encoding). This way the string never contains invalid characters.

It should be safe for recipe developers to replace all calls to htmlspecialchars() with calls to PHSC(). Only the first argument is required when calling PHSC().

Unlike htmlspecialchars(), the PHSC() function can process arrays recursively (only the values are converted, not the keys of the array).

 PSS($string)
The PSS() function (PmWiki Strip Slashes) removes the backslashes that are
automatically inserted in front of quotation marks by
the /e option of PHP's preg_replace function.  PSS() is
most commonly used in replacement arguments to Markup(),
when the pattern specifies /e and one or more of the 
parenthesized subpatterns could contain a quote or backslash.  
("PSS" stands for "PmWiki Strip Slashes".)
From PM: PmWiki expects PSS() to always occur inside of double-quoted strings and to contain single quoted strings internally.  The reason for this is that we don't want the $1 or $2 to accidentally contain characters that would then be interpreted inside of the double-quoted string when the PSS is evaluated.
Markup('foo', 'inline', '/(something)/e', 'Foo(PSS("$1"))');  # wrong
Markup('foo', 'inline', '/(something)/e', "Foo(PSS('$1'))");  # right
 Note, the new-style markup definitions with Markup_e() do NOT need to use PSS() in the replacement strings. 

Example
This is a fictitious example where PSS() should be used.
Let us assume that you wish to define a directive (:example:)
such that (:example "A horse":) results in the HTML
<div>"A horse"</div>.
Here is how the markup rule can be created:

Markup('example', 'directives',
       '/\\(:example\\s(.*?):\\)/e',
       "Keep('<div>'.PSS('$1').'</div>')");

We need to use PSS() around the '$1' because the matched text
could contain quotation marks, and the /e will add backslashes
in front of them.

 stripmagic($string)
This function should be used when processing the contents of $_POST or _GET variables when they could contain quotes or backslashes. It verifies get_magic_quotes(), if true,
strips the automatically inserted escapes from the string.

 FmtPageName($fmt, $pagename)
Returns $fmt, with $variable and $[internationalisation] substitutions performed, under the assumption that the current page is pagename. See PmWiki.Variables for an (incomplete) list of available variables, PmWiki.Internationalizations for internationalisation.  Security: not to be run on user-supplied data.

This is one of the major functions in PmWiki, see PmWiki.FmtPageName for
lots of details.

 Markup($name, $when, $pattern, $replace)
Adds a new markup to the conversion table.  Described in greater detail at PmWiki.CustomMarkup.

This function is used to insert translation rules into the PmWiki's
translation engine. The arguments to Markup() are all strings, where:

$name The string names the rule that is inserted.  If a rule of the same name already exists, then this rule is ignored.
$when This string is used to control when a rule is to be applied relative to other rules.  A specification of "<xyz" says to apply this rule prior to the rule named "xyz", while ">xyz" says to apply this rule after the rule "xyz".  See CustomMarkup for more details on the order of rules.
$pattern This string is a regular expression that is used by the translation engine to look for occurences of this rule in the markup source.
$replace This string will replace the matched text when a match occurs.
Also see: PmWiki.CustomMarkup and Cookbook:Functions#Markup

 MarkupToHTML($pagename, $str)
 Converts the string $str containing PmWiki markup into the corresponding HTML code, assuming the current page is $pagename.

Also see: Cookbook:Functions#MarkupToHTML

 mkdirp($dir)
The function mkdirp($dir) creates a directory, $dir, if it doesn't
already exist, including any parent directories that might be needed.  For
each directory created, it checks that the permissions on the directory are
sufficient to allow PmWiki scripts to read and write files in that
directory.  This includes checking for restrictions imposed by PHP's
safe_mode setting.  If mkdirp() is unable to successfully create a
read/write directory, mkdirp() aborts with an error message telling the
administrator the steps to take to either create $dir manually or give
PmWiki sufficient permissions to be able to do it.

 MakeLink($pagename, $target, $txt, $suffix, $fmt)
The function MakeLink($pagename, $target, $txt, $suffix, $fmt) returns an html-formatted anchor link. Its arguments are as follows:
 $pagename is the source page
 $target is where the link should go
 $txt is the value to use for '$LinkText' in the output 
 $suffix is any suffix string to be added to $txt
 $fmt is a format string to use
If $txt is NULL or not specified, then it is automatically computed from $target.

If $fmt is NULL or not specified, then MakeLink uses the default
format as specified by the type of link.  For page links this
means the $LinkPageExistsFmt and $LinkPageCreateFmt variables,
for intermap-style links it comes from either the $IMapLinkFmt
array or from $UrlLinkFmt.  Inside of the formatting strings,
$LinkUrl is replaced by the resolved url for the link, $LinkText
is replaced with the appropriate text, and $LinkAlt is replaced
by any "title" (alternate text) information associated with the
link.

Also see: PmWiki:MakeLink and Cookbook:Functions#MakeLink

 MakeUploadName($pagename, $x)
MakeUploadName() simply takes a string $x (representing an attachment's
name) and converts it to a valid name by removing any unwanted characters.
It also requires the name to begin and end with an alphanumeric character,
and as of 2.0.beta28 it forces any file extensions to lowercase.
This function is defined in scripts/upload.php and only used when uploads
are enabled.

 SessionAuth($pagename, $auth=NULL)
SessionAuth() manages keeping authentication via cookie-sessions. Session contains
ever password or vaidated id and associated groups from previous calls.It adds
elements passed by $auth to session. It also writes every element
saved in session to $AuthPw(passwords) and $AuthList(ids and groups).

 IsAuthorized($chal, $source, &$from)
IsAuthorized takes a pageattributesstring (e. g. "id:user1 $1$Ff3w34HASH...") in $chal.
$source is simply returned and used for building the authcascade (pageattributes - groupattributes - 
$DefaultPassword). $from will be returned if $chal is empty, because it is not checked 
before calling IsAuthorized(), this is needed for the authcascade. IsAuthorized() returns an array
with three values: $auth 1 - authenticated, 0 - not authenticated, -1 - refused; $passwd; 
$source from the parameter list.

 CondAuth ($pagename, 'auth level')
CondAuth implements the ConditionalMarkup for (:if auth level:). For instance  CondAuth($pagename,'edit') is true if authorization level is 'edit'. Use inside local configuration files to build conditionals with a check of authorization level, similar to using (:if auth level:) on a wiki page.

Note that CondAuth() should be called after all authorization levels and passwords have been defined. For example, if you use it with Drafts, you should include the draft.php script before calling CondAuth():

   $EnableDrafts = 1;
   $DefaultPasswords['publish'] = pmcrypt('secret');
   include_once("$FarmD/scripts/draft.php");
   if (! CondAuth($pagename, 'edit')) { /* whatever */ }

Best is to use CondAuth() near the bottom of your config.php script.

 RetrieveAuthPage($pagename, $level, $authprompt=true, $since=0)
 Pm words as said in http://article.gmane.org/gmane.comp.web.wiki.pmwiki.user/12493/match=retrieveauthpage%%
where:

   $pagename   - name of page to be read
   $level      - authorization level required (read/edit/auth/upload)
   $authprompt - true if user should be prompted for a password if needed
   $since      - how much of the page history to read
                 0 == read entire page including all of history
                 READPAGE_CURRENT == read page without loading history
                 timestamp == read history only back through timestamp
The $since parameter allows PmWiki to stop reading from a page file
as soon as it has whatever information is needed -- i.e., if an operation
such as browsing isn't going to need the page's history, then specifying
READPAGE_CURRENT can result in a much faster loading time.  (This can be 
especially important for things such as searching and page listings.)
However, if combined with UpdatePage, the updated page will have no history.

Use e.g. $page = @RetrieveAuthPage('Main.MyPage', 'read') to obtain a page object that contains all the information of the correspondent file in separate keys, e.g. $page['text'] will contain a string with the current wiki markup of Main.MyPage. Use this generally in preference to the alternative function ReadPage($pagename, $since=0) since it respects the authorisation of the user, i.e. it checks the authorisation level before loading the page, or it can be set to do so. ReadPage() reads a page regardless of permission.

Passing 'ALWAYS' as the authorization level (instead of 'read', 'edit', etc.) will cause RetrieveAuthPage to always read and return the page, even if it happens to be protected by a read password.

 RetrieveAuthSection($pagename, $pagesection, $list=NULL, $auth='read')
RetrieveAuthSection extracts a section of text from a page. If $pagesection starts with anything other than '#', it identifies the page to extract text from.  Otherwise RetrieveAuthSection looks in the pages given by $list, or in $pagename if $list is not specified. 
The selected page is placed in the global $RASPageName variable. 
The caller is responsible for calling Qualify() as needed.
Provides a way to limit the array that is returned by ReadPage, so that it only pulls the content up to a specific section marker. For example, pulling from start of page to '##blogend':

function FeedText($pagename, &$page, $tag) {
  $text = RetrieveAuthSection($pagename, '##blogend');
  $content = MarkupToHTML($pagename, $text);
  return "<$tag><![CDATA[$content]]></$tag>";
}

The '##blogend' argument says to read from the beginning of the page to just before the line containing the  marker.  See
IncludeOtherPages for more information about the section specifications.

This version won't read text from pages that are read-protected; if you want to get text even from read-protected pages, then 

  $text = RetrieveAuthSection($pagename, '##blogend', NULL, 'ALWAYS');

 UpdatePage($pagename, $old (page object), $new (page object));
More Technical Notes

UpdatePage() allows cookbook recipes to mimic the behavior of editing wiki pages via the browser. Internally, PmWiki does several house keeping tasks which are accessible via this function (preserving history/diff information, updating page revision numbers, updating RecentChanges pages, sending email notifications, etc._
"Page object" refers to an array pulled from RetrieveAuthPage($pagename, $level, $authprompt=true, $since=0); (preferred), or ReadPage($pagename);  (disregards page security). Note that $new['text'] should contain all page data for the new version of the page. 
If a page doesn't exist, UpdatePage() will attempt to create it.
Ignoring $old (e.g. UpdatePage($pagename, '', $new);) will erase all historical page data---a tabula rasa.
If you retrieved $old using RetrieveAuthPage($pagename,$auth,$prompt,READPAGE_CURRENT) and set $new=$old, then UpdatePage will also erase all historical data
UpdatePage() cannot be called directly from config.php because there are necessary initializations which occur later in pmwiki.php.  It is not enough to just load stdconfig.php.  If you want to use UpdatePage() you will need to do it within a custom markup, a custom markup expression, or a custom action.

Categories: PmWiki Developer

< Variables | Documentation Index | Page file format >




This page may have  a more recent version on pmwiki.org: PmWiki:Functions, and  a talk page: PmWiki:Functions-Talk.






 Last modified July 08, 2016, at 06:36 PM

Bren School of Information and Computer Science
University of California, Irvine





